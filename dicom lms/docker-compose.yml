version: '3.8'

services:
  # PostgreSQL Database for Moodle
  moodle-db:
    image: postgres:15-alpine
    container_name: medical-lms-db
    environment:
      POSTGRES_DB: moodle
      POSTGRES_USER: moodleuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - moodle_db_data:/var/lib/postgresql/data
      - ./configs/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Moodle Application Server
  moodle-app:
    build:
      context: ./docker/moodle
      dockerfile: Dockerfile
      args:
        MOODLE_VERSION: 4.5
    container_name: medical-lms-moodle
    depends_on:
      - moodle-db
      - orthanc-server
    environment:
      MOODLE_DATABASE_TYPE: pgsql
      MOODLE_DATABASE_HOST: moodle-db
      MOODLE_DATABASE_NAME: moodle
      MOODLE_DATABASE_USER: moodleuser
      MOODLE_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
      MOODLE_SITE_NAME: "Medical Imaging LMS"
      MOODLE_SITE_SHORT_NAME: "MedLMS"
      MOODLE_ADMIN_USER: admin
      MOODLE_ADMIN_PASSWORD: ${MOODLE_ADMIN_PASSWORD:-admin123!}
      MOODLE_ADMIN_EMAIL: admin@medicallms.local
      ORTHANC_URL: http://orthanc-server:8042
      SSL_PROXY: "true"
    volumes:
      - moodle_data:/var/www/html/moodledata
      - moodle_files:/var/www/html
      - ./moodle-plugins:/var/www/html/mod/medical_imaging
      - ./configs/moodle-config.php:/var/www/html/config.php
    ports:
      - "80:80"
      - "443:443"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orthanc DICOM Server
  orthanc-server:
    build:
      context: ./docker/orthanc
      dockerfile: Dockerfile
    container_name: medical-lms-orthanc
    environment:
      ORTHANC_JSON: |
        {
          "Name": "MedicalLMS-Orthanc",
          "HttpServerEnabled": true,
          "HttpPort": 8042,
          "DicomServerEnabled": true,
          "DicomAet": "MEDICALLMS",
          "DicomPort": 4242,
          "RemoteAccessAllowed": true,
          "AuthenticationEnabled": true,
          "RegisteredUsers": {
            "moodle": "${ORTHANC_PASSWORD:-orthanc123!}"
          },
          "CorsEnabled": true,
          "CorsOrigins": "*",
          "DicomWeb": {
            "Enable": true,
            "Root": "/dicom-web/",
            "EnableMetadata": true,
            "StudiesMetadata": "MainDicomTags",
            "SeriesMetadata": "MainDicomTags"
          },
          "StorageDirectory": "/var/lib/orthanc/db",
          "IndexDirectory": "/var/lib/orthanc/db",
          "StorageCompression": true,
          "MaximumStorageSize": 0,
          "MaximumPatientCount": 0,
          "LogExportedResources": true,
          "KeepAlive": true,
          "TcpNoDelay": true,
          "HttpCompressionEnabled": true,
          "HttpRequestTimeout": 30,
          "HttpCacheSize": 128,
          "JobsHistorySize": 10,
          "SaveJobs": true
        }
    volumes:
      - orthanc_data:/var/lib/orthanc/db
      - ./configs/orthanc.json:/etc/orthanc/orthanc.json:ro
    ports:
      - "8042:8042"
      - "4242:4242"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OHIF Viewer Service
  ohif-viewer:
    build:
      context: ./docker/ohif-viewer
      dockerfile: Dockerfile
    container_name: medical-lms-ohif
    depends_on:
      - orthanc-server
    environment:
      NODE_ENV: production
      PROXY_TARGET: http://orthanc-server:8042
      CLIENT_ID: ohif-viewer
      APP_CONFIG: |
        {
          "routerBasename": "/ohif/",
          "extensions": [],
          "modes": [],
          "showStudyList": true,
          "maxNumberOfWebWorkers": 3,
          "showLoadingIndicator": true,
          "strictZSpacingForVolumeViewport": true,
          "maxNumRequests": {
            "interaction": 100,
            "thumbnail": 75,
            "prefetch": 10
          },
          "dataSources": [
            {
              "namespace": "@ohif/extension-default.dataSourcesModule.dicomweb",
              "sourceName": "dicomweb",
              "configuration": {
                "friendlyName": "Medical LMS DICOM Server",
                "name": "aws",
                "wadoUriRoot": "http://orthanc-server:8042/wado",
                "qidoRoot": "http://orthanc-server:8042/dicom-web",
                "wadoRoot": "http://orthanc-server:8042/dicom-web",
                "qidoSupportsIncludeField": false,
                "supportsReject": false,
                "imageRendering": "wadors",
                "thumbnailRendering": "wadors",
                "enableStudyLazyLoad": true,
                "supportsFuzzyMatching": false,
                "supportsWildcard": true,
                "staticWado": true,
                "singlepart": "bulkdata,video"
              }
            }
          ],
          "defaultDataSourceName": "dicomweb"
        }
    ports:
      - "3000:3000"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Pathology Slide Viewer Service
  pathology-viewer:
    build:
      context: ./docker/pathology-viewer
      dockerfile: Dockerfile
    container_name: medical-lms-pathology
    environment:
      NODE_ENV: production
      IIIF_SERVER_URL: http://pathology-viewer:8080
    volumes:
      - pathology_slides:/app/slides
    ports:
      - "8080:8080"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Unified Medical Viewer (React App)
  unified-viewer:
    build:
      context: ./unified-viewer
      dockerfile: Dockerfile
    container_name: medical-lms-viewer
    depends_on:
      - ohif-viewer
      - pathology-viewer
      - orthanc-server
    environment:
      NODE_ENV: production
      REACT_APP_OHIF_URL: http://ohif-viewer:3000
      REACT_APP_PATHOLOGY_URL: http://pathology-viewer:8080
      REACT_APP_ORTHANC_URL: http://orthanc-server:8042
      REACT_APP_MOODLE_URL: http://moodle-app
    ports:
      - "3001:3000"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: medical-lms-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123!}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy with SSL
  nginx-proxy:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: medical-lms-proxy
    depends_on:
      - moodle-app
      - ohif-viewer
      - pathology-viewer
      - unified-viewer
    environment:
      ENABLE_IPV6: "false"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - medical-lms-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  moodle_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  moodle_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/moodledata
  moodle_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/moodle
  orthanc_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/orthanc
  pathology_slides:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/pathology
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

networks:
  medical-lms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
